/*
（1）如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
（2）如果百位上数字为0，百位上可能出现1的次数由更高位决定。
    比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。
    可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。
（3）如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。
    比如：12113，则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。
    和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。
（4）如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定。
    比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个
    并且等于更高位数字+1（12+1）乘以当前位数（100）
（5）可以令 left = n, right = 0, mul = 1，分别表示 左边的数、右边的数、当前位的倍数，只要 left > 0 就一直循环
*/ 


    

public class Solution {
    public int countDigitOne(int n) {
        int count = 0;
        int x = 1;
        int mul = 1;   // 当前位的倍数，比如 10、100、1000
        int left = n;    // 左边的位
        int right = 0;    // 右边的位
        if(n == 0) {
            return x < 1 ? n: 0;
        }
        while(left > 0) {
            int digit = left % 10;   // 当前位的数 
            left = left / 10;     // 左边位的数
            if(digit == x) {
                count = count + left * mul;
                count = count + right + 1;
            }
            else if(digit < x) {
                count = count + left * mul;
            }
            else {
                count = count + (left + 1) * mul;
            }
            if(x == 0 && mul > 1) {
                count = count - mul;
            }
            right = right + digit * mul;  // 更新 当前位右边的数
            mul = mul * 10;     // 更新当前位的倍数
        }
        return count;
    }
}

